% The roulette table pays nobody except him that 
% keeps it. Nevertheless a passion for gaming is 
% common, though a passion for keeping roulette 
% tables is unknown.
% - George Bernard Shaw

% %%
% Created 31 Oct 2010
% Last updated 9 Nov 2010
% Submitted 9 Nov 2010
% tn248@cam.ac.uk
% %%

% Because I forget:
% Sweave("spa2_tn248", driver = cacheSweaveDriver)

\documentclass[9pt, oneside, reqno]{article}
\usepackage{amssymb, amsthm, amsmath, amsfonts}
\usepackage{fullpage}
\usepackage[tableposition=top]{caption}
\usepackage{ifthen}
\usepackage{listings}

\newtheorem{theorem}{Theorem}[section]
\newtheorem{proposition}[theorem]{Proposition}

\setlength{\textheight}{9truein}
\setlength{\topmargin}{-.5truein}
\setlength{\headheight}{0truein}
\setlength{\headsep}{0truein}

%\hwinfo{Thomson Nguyen}{Course}{01/01/2010}{Snazzy title}
\newcommand{\hwinfo}[4]{\hfill\hfill #1 \par
\hfill\hfill #2 \par
\hfill\hfill #3 \par
\par\bigskip
\begin{center}
\large	#4
\end{center}
}

\newcommand{\ans}[1]{\begin{proof}[{\bf #1}]}
\newcommand{\eans}{\end{proof}}
\theoremstyle{plain}

\usepackage[T1]{fontenc}
\usepackage[utf8]{inputenc}

% Euler for math | Palatino for rm | Helvetica for ss | Courier for tt
\renewcommand{\rmdefault}{ppl} % rm
\linespread{1.05}  % Palatino needs more leading
\usepackage[scaled]{helvet} % ss
\usepackage{courier} % tt
\usepackage{eulervm} 

\lstloadlanguages{R}
\lstdefinelanguage{Renhanced}[]{R}{%
  morekeywords={acf,ar,arima,arima.sim,colMeans,colSums,is.na,is.null, mapply,ms,na.rm,nlmin,replicate,row.names,rowMeans,rowSums,seasonal, sys.time,system.time,ts.plot,which.max,which.min},
  deletekeywords={c},
  alsoletter={.\%},
  alsoother={:_\$}}
\lstset{language=Renhanced,extendedchars=true,
  basicstyle=\small\ttfamily,
  commentstyle=\textsl,
  keywordstyle=\mdseries,
 showstringspaces=false,
  index=[1][keywords], 
  indexstyle=\indexfonction}

\newcommand{\indexfonction}[1]{\index{#1@\texttt{#1}}}

\newenvironment{enumalph}{\begin{enumerate}\renewcommand{\labelenumi}{\textnormal{(\alph{enumi})}}}{\end{enumerate}}

\SweaveOpts{keep.source=TRUE} % I like comments

\begin{document}
\normalfont
\setkeys{Gin}{width=3.5in} % How big do we want our R figures?

\hwinfo{Thomson Nguyen (tn248)}{Scientific Programming (SP)}{\today}{Scientific Programming\\Assignment 2}

%\tableofcontents

\section{Roulette (20)}
\ans{Answer}
We have a single-zero roulette wheel: 18 red numbers, 18 black numbers, one green zero. We have four betting systems (or games from here on) to model. To model these four games, we should probably model a roulette spin first. For the sake of simplicity, let's assume the only possible bets are coloured bets (red or black), or single number bets (1-36). This means no splits, streets, corners, sixes, trios, baskets, or other bets at the roulette table.

<<alwaysbetonred>>=
roulettespin <- function(number, bet){
	# The spin!
	winner <- sample(0:36,1)
	
	# In roulette, odd numbers are red and even are black in [1,10] and [19,28].
	# In [11,18] and [29,36], odd numbers are black, and even are red. 
	# How confusing! 
	
	red <- c(1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36)
	black <- c(2,4,6,8,10,11,13,15,17,20,22,24,26,28,29,31,33,35)
	green <- 0
	
	spinwin <- 0
	
	if(winner %in% red)
	winner[2] <- -1
	else if(winner %in% black)
	winner[2] <- -2
	else if(winner %in% green)
	winner[2] <- 0
	
	if(number <= 0 & winner[2] == number){
			spinwin <- bet} # 1:1 odds 
	else if(number == winner[1]){
		spinwin <- bet * 35} # 35:1 odds
	else{
		spinwin <- -bet}
		
	return(spinwin) 
	}
@

Note that we've designated {\tt number} to $-1$ for a red bet, and $-2$ for a black bet.

Now that we have our roulette spin, we can now model our four games. Note that all four of the proceeding functions take no inputs, and will output the number of bets and the amount won in a single game.

Our first game consists of a single bet of \$1, always on red. Let's call it {\tt alwaysbetonred}: 

<<alwaysbetonred>>=
alwaysbetonred <- function(){
	redspins <- 0
	redwins <- 0

	redwins <- roulettespin(-1,1)
	redspins <- redspins + 1
	return(c(redspins,redwins))
	}
@

We can also take one bet of \$1 on one number ({\tt betonenumber}), in hopes that we get the higher 35:1 payout, but with the harder odds:

<<betonenumber>>=
betonenumber <- function(){
	onenumberspins <- 0
	onenumberwins <- 0
	
	# 17 is my favorite number
	onenumberwins <- roulettespin(17,1)
	onenumberspins <- onenumberspins +1
	return(c(onenumberspins,onenumberwins))
	}
@

Our next game is the martingale. The martingale in roulette refers to a class of 18th century betting strategies made popular in France. Paul Pierre L\'{e}vy and Joseph Leo Doob introduced the martingale as a stochastic process in probability theory much later on in the early 20th century. It is said that their motivation for developing martingales was to prove the stupidity of betting systems claiming to have ``beaten the house''. In our implementation ({\tt martingale}), we start with a \$1 bet on red, doubling our bet after each successive loss. We reset our bet to \$1 after a win, and we end the game after winning \$10, or when our bet exceeds \$100.

<<martingale>>=
martingale <- function(){
	martingalespins <- 0
	martingalewins <- 0
	
	currentbet <- 1
	while(martingalewins < 10 & currentbet < 100){
		spin <- roulettespin(-1,currentbet) # the actual spin
		martingalespins <- martingalespins + 1
		martingalewins <- martingalewins + spin
		
		if(spin < 0){
			currentbet <- currentbet * 2}
			
		else if(spin > 0){
			currentbet <- 1}
		
		#print(c(martingalespins,martingalewins,currentbet))
		}
		
	return(c(martingalespins,martingalewins))
	}
@

Lastly, we'll look at the Labouchere (split martingale) system. No one really knows who came up with this variant of the martingale, although it is said that British politician (and Cantab) Henry Labouchere had devised the system from his fondness for gambling. In our implementation ({\tt labouchere}), we start with the ordered list $(1,2,3,4)$. We will bet the sum of the first and last numbers of this list on red, meaning our first bet is \$5. On a win, the first and last numbers are deleted; on a loss, the sum is added to the end of the list. This process continues until we have an empty list, or until the bet exceeds \$100.

<<labouchere>>=
labouchere <- function(){
	laboucherespins <- 0
	laboucherewins <- 0
	currentbet <- 0 # to be overwritten quite soon
	list <- c(1,2,3,4)
	
	while(length(list) != 0 & currentbet < 100){
		currentbet <- list[1] + list[length(list)] #initialize
		spin <- roulettespin(-1,currentbet)
		laboucherespins <- laboucherespins + 1
		laboucherewins <- laboucherewins + spin
		
		if(spin < 0){
			list <- c(list, currentbet)}
			
		else if (spin > 0){
			list <- list[c(-1,-length(list))]}
		
		#print(list)
		#print(c(laboucherespins,laboucherewins,currentbet))
		}
	return(c(laboucherespins,laboucherewins))
	}
@

We'll now create a function, {\tt simulateall}, that will run these four games a specified number of times (specified by its sole argument), and outputs a table of the expected winnings, the win percentage, and the expected number of bets (play time), and their standard deviations:

<<simulateall>>=
simulateall <- function(numberoftimes){
	Atrials <- t(replicate(numberoftimes,alwaysbetonred()))
	Btrials <- t(replicate(numberoftimes,betonenumber()))
	Ctrials <- t(replicate(numberoftimes,martingale()))
	Dtrials <- t(replicate(numberoftimes,labouchere()))
	
	Awins <- which(Atrials[,2] > 0)
	Bwins <- which(Btrials[,2] > 0)
	Cwins <- which(Ctrials[,2] > 0)
	Dwins <- which(Dtrials[,2] > 0)
		
	totalspins <- c(mean(Atrials[,1]),mean(Btrials[,1]),mean(Ctrials[,1]),mean(Dtrials[,1]))
	spinssd <- c(sd(Atrials[,1]),sd(Btrials[,1]),sd(Ctrials[,1]),sd(Dtrials[,1]))
	
	totalwins <- c(length(Awins),length(Bwins),length(Cwins),length(Dwins))/numberoftimes
	winssd <- sqrt(totalwins * (1-totalwins))
		
	expectedwin <- c(mean(Atrials[,2]),mean(Btrials[,2]),mean(Ctrials[,2]),mean(Dtrials[,2]))
	winningssd <- c(sd(Atrials[,2]),sd(Btrials[,2]),sd(Ctrials[,2]),sd(Dtrials[,2]))
	
	
	results <- cbind(expectedwin,winningssd,totalwins,winssd, totalspins,spinssd)
	rownames(results) <- c("Bet on red","Bet one number","Martingale","Labouchere")
	colnames(results) <- c("Expected winnings", "(SD)","Win percentage","(SD)",
	"Expected bets","(SD)")
	return(results)
	}
@ 

For 22.2.1, let's run this for $100,000$ repetitions of each game. We'll start with setting the seed to my birthday in American date form. We'll also call {\tt cacheSweave}\footnote{I've attached the cache folders with this .Rnw and .pdf, as my {\tt simulateall} function is a bit computationally expensive. I used {\tt system.time} to time the function, and for $100$k it took about 200 seconds.} because the next couple of steps are computationally expensive. Table~\ref{table:onetime} has the results of our single simulation:

<<settingseed>>=
seed <- 110685
set.seed(seed)
library(cacheSweave)
@ 

<<simulating100k, cache=TRUE>>=
results <- simulateall(100000)
@

<<>>=
results
@

% Parts of the following multicolumn table code is courtesy of S. Bagaria.
\begin{table}[H]
\begin{center}
\begin{tabular}{rcc|cc|cc}
& \multicolumn{2}{c|}{{\bf Expected Winnings}} & \multicolumn{2}{c|}{{\bf Proportion Wins}} & \multicolumn{2}{c}{{\bf Expected Bets}} \\
Game & Mean & SD & Mean & SD & Mean & SD \\
<<tableonetime, results=tex, echo=FALSE>>=
library(xtable)
print(xtable(results), include.colnames=F, only.contents=T)
@
\end{tabular}
\end{center}
\caption{One $100$k simulation of four different betting systems in roulette.}
\label{table:onetime}
\end{table}

As a check (and for 22.2.2), let's calculate the expected value and proportion of games won for games A and B (i.e., betting on one colour and betting on one number). For game A, our expected value is 
\[\frac{18}{37} \times 1 + \frac{19}{37} \times - 1 = -0.02703,\] 
with a win ratio of $\frac{18}{37}=0.4865$.  Compare with our values in {\tt results}, $-0.03154$ and $0.4842$. Our percentage error is 
\[\left | \frac{-0.02703 - (-0.03154)}{0.2703}\right | \times 100 = 1.669\%\] for the expected value and 
\[\left| \frac{0.4865-0.4842}{0.4865}\right| \times 100 = 0.472\%\] for our win ratio. 

For game B, our expected value is 
\[\frac{1}{37} \times 35 + \frac{36}{37} \times -1 = -0.02703,\] 
with a win ratio of $\frac{1}{37}=0.02703$. Compare this with our values of $-0.02440$ and $0.02710$, respectively. This gives us an error percentage of 
\[\left | \frac{-0.02703 - (-0.02440)}{0.2703}\right | \times 100 = 0.973\%\] 
for the expected value and 
\[\left| \frac{0.02703-0.02710}{0.02703}\right| \times 100 = 0.259\%\] for our win ratio. Not bad!

We see that for game A (betting one colour), the maximum amount we can win or lose is \$1, as our game only lasts for one bet. This is exactly the same for game B (betting one number). For the martingale, the maximum amount we can win is \$10 (our goal), but our maximum loss is if we were to lose seven times in a row, or $\sum^7_{i=0} 2^i = \$127$. Due to nature of continuing to spin until a list has been exhausted, for Labouchere we get that the maximum amount we can win is \$58, and the maximum loss in a single game is \$899.

We probably want to find out the variation between different runs, so now we will repeat this $100$k simulation five times (22.2.3):

<<simulating100kfivetimes, cache=TRUE>>=
run1 <- simulateall(100000)
run2 <- simulateall(100000)
run3 <- simulateall(100000)
run4 <- simulateall(100000)
run5 <- simulateall(100000)
@

%<<outputfivetimes,echo=FALSE, results=tex>>=
%xtable(run1)
%xtable(run2)
%xtable(run3)
%xtable(run4)
%xtable(run5)
%@

Let's now take the min and max values of each column across the five simulations. These values are assembled in Table~\ref{table:fivesim}:

<<minmax>>=
expvals=matrix(rep(0,8),4,2)
propwins=matrix(rep(0,8),4,2)
expbets=matrix(rep(0,8),4,2)
for (i in 1:4){
expvals[i,] <- summary(c(run1[i,1],run2[i,1],run3[i,1],run4[i,1],run5[i,1]))[c(1,6)]
propwins[i,] <- summary(c(run1[i,3],run2[i,3],run3[i,3],run4[i,3],run5[i,3]))[c(1,6)]
expbets[i,] <- summary(c(run1[i,5],run2[i,5],run3[i,5],run4[i,5],run5[i,5]))[c(1,6)]}
tablevar<- cbind(expvals,propwins,expbets)
rownames(tablevar) <- c("Bet on red","Bet one number","Martingale","Labouchere")
@

\begin{table}[H]
\begin{center}
\begin{tabular}{rcc|cc|cc}
& \multicolumn{2}{c|}{{\bf Expected Winnings}} & \multicolumn{2}{c|}{{\bf Proportion Wins}} & \multicolumn{2}{c}{{\bf Expected Bets}} \\
Game & Min & Max & Min & Max & Min & Max \\
<<tablevar, results=tex, echo=FALSE>>=
library(xtable)
print(xtable(tablevar), include.colnames=F, only.contents=T)
@
\end{tabular}
\end{center}
\caption{Variation of five different $100$k simulations of the four betting systems.}
\label{table:fivesim}
\end{table}

Here, Table~\ref{table:onetime} seems to suggest that the Labouchere system has the most variable expected winnings. We also see that the Labouchere system also has the most variable expected playing time. 

\eans
\end{document}
